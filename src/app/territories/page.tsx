'use client'

import { motion } from 'framer-motion'
import { useState, useCallback } from 'react'
import { useTerritoryStore } from '@/modules/territory/store'
import { useNobleStore } from '@/modules/noble/store'
import { useGameNotifications } from '@/lib/hooks/useGameNotifications'
import { TerritoryGrid } from '@/modules/territory/components/TerritoryGrid'
import { Card, CardGroup } from '@/shared/ui/Card'
import { Territory, TerritoryType } from '@/modules/territory/types/territory'
import { staggerContainer, fadeInUp } from '@/shared/ui/animations'
import { withPageTransition } from '@/lib/hooks/usePageTransition'

function TerritoriesPage() {
  const [selectedType, setSelectedType] = useState<TerritoryType | 'all'>('all')
  const [upgradingTerritoryId, setUpgradingTerritoryId] = useState<string | null>(null)
  const territories = useTerritoryStore(state => state.territories)
  const noble = useNobleStore(state => state.noble)
  const removeResources = useNobleStore(state => state.removeResources)
  const addExperience = useNobleStore(state => state.addExperience)
  const upgradeTerritory = useTerritoryStore(state => state.upgradeTerritory)
  const { notifyResourceReward, notifyError, notifyAchievement } = useGameNotifications()

  const handleUpgrade = useCallback(async (territory: Territory): Promise<void> => {
    if (!noble) {
      notifyError('–û—à–∏–±–∫–∞', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–≤–æ—Ä—è–Ω–∏–Ω–∞')
      return
    }

    const upgradeRequirements = {
      gold: 500 * (territory.level + 1),
      influence: 200 * (territory.level + 1)
    }

    if (
      noble.resources.gold >= upgradeRequirements.gold &&
      noble.resources.influence >= upgradeRequirements.influence
    ) {
      try {
        setUpgradingTerritoryId(territory.id)
        removeResources(upgradeRequirements)
        upgradeTerritory(territory.id)
        addExperience(500)

        const productionBonus = {
          gold: Math.floor((territory.production?.gold || 0) * 0.2),
          influence: Math.floor((territory.production?.influence || 0) * 0.2)
        }

        notifyResourceReward(productionBonus)
        notifyAchievement(
          '–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è —É–ª—É—á—à–µ–Ω–∞!',
          `${territory.name} –¥–æ—Å—Ç–∏–≥–∞–µ—Ç ${territory.level + 1} —É—Ä–æ–≤–Ω—è`
        )
      } catch (error) {
        notifyError(
          '–û—à–∏–±–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è',
          '–ù–µ —É–¥–∞–ª–æ—Å—å —É–ª—É—á—à–∏—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        )
      } finally {
        setUpgradingTerritoryId(null)
      }
    } else {
      const missingResources = []
      if (noble.resources.gold < upgradeRequirements.gold) {
        missingResources.push(`${upgradeRequirements.gold - noble.resources.gold} –∑–æ–ª–æ—Ç–∞`)
      }
      if (noble.resources.influence < upgradeRequirements.influence) {
        missingResources.push(`${upgradeRequirements.influence - noble.resources.influence} –≤–ª–∏—è–Ω–∏—è`)
      }

      notifyError(
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤',
        `–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: ${missingResources.join(', ')}`
      )
      return
    }
  }, [noble, removeResources, upgradeTerritory, addExperience, notifyResourceReward, notifyAchievement, notifyError])

  const filteredTerritories = selectedType === 'all'
    ? territories
    : territories.filter(t => t.type === selectedType)

  const typeStats = territories.reduce((acc, territory) => {
    acc[territory.type] = (acc[territory.type] || 0) + 1
    return acc
  }, {} as Record<TerritoryType, number>)

  const typeFilters: { type: TerritoryType | 'all', label: string, icon: string }[] = [
    { type: 'all', label: '–í—Å–µ', icon: 'üåê' },
    { type: 'camp', label: '–õ–∞–≥–µ—Ä—è', icon: '‚õ∫' },
    { type: 'village', label: '–î–µ—Ä–µ–≤–Ω–∏', icon: 'üèòÔ∏è' },
    { type: 'mine', label: '–®–∞—Ö—Ç—ã', icon: '‚õèÔ∏è' },
    { type: 'fortress', label: '–ö—Ä–µ–ø–æ—Å—Ç–∏', icon: 'üè∞' },
    { type: 'temple', label: '–•—Ä–∞–º—ã', icon: 'üèõÔ∏è' }
  ]

  return (
    <motion.div
      variants={staggerContainer}
      initial="hidden"
      animate="show"
      className="space-y-8"
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Card gradient="from-indigo-500/20 to-purple-500/20" className="p-8">
        <h1 className="text-3xl font-bold text-white mb-2">–¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏</h1>
        <p className="text-gray-300">
          –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –≤–ª–∞–¥–µ–Ω–∏—è–º–∏ –∏ —Ä–∞—Å—à–∏—Ä—è–π—Ç–µ —Å–≤–æ—ë –≤–ª–∏—è–Ω–∏–µ
        </p>
        <div className="mt-4 flex gap-4">
          <div className="px-4 py-2 bg-white/10 rounded-lg">
            <span className="text-white font-medium">
              –í—Å–µ–≥–æ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π: {territories.length}
            </span>
          </div>
          {territories.length === 0 && (
            <div className="px-4 py-2 bg-amber-500/20 rounded-lg">
              <span className="text-amber-300 font-medium">
                –ü–æ—Å–µ—Ç–∏—Ç–µ –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π –†—ã–Ω–æ–∫, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏
              </span>
            </div>
          )}
        </div>
      </Card>

      {/* –§–∏–ª—å—Ç—Ä—ã */}
      <motion.div variants={fadeInUp}>
        <Card className="p-4">
          <div className="flex gap-2">
            <button
              onClick={() => setSelectedType('all')}
              className={`px-4 py-2 rounded-lg transition-colors ${
                selectedType === 'all'
                  ? 'bg-primary text-white'
                  : 'bg-white/5 hover:bg-white/10 text-gray-300'
              }`}
            >
              –í—Å–µ
            </button>
            {['village', 'mine', 'fortress', 'temple'].map(type => (
              <button
                key={type}
                onClick={() => setSelectedType(type as TerritoryType)}
                className={`px-4 py-2 rounded-lg transition-colors ${
                  selectedType === type
                    ? 'bg-primary text-white'
                    : 'bg-white/5 hover:bg-white/10 text-gray-300'
                }`}
              >
                {type.charAt(0).toUpperCase() + type.slice(1)}
              </button>
            ))}
          </div>
        </Card>
      </motion.div>

      {/* –°–ø–∏—Å–æ–∫ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π */}
      <motion.div variants={fadeInUp}>
        {territories.length === 0 ? (
          <Card className="p-8 text-center">
            <p className="text-gray-400">
              –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π. –ü–æ—Å–µ—Ç–∏—Ç–µ –ö–æ—Ä–æ–ª–µ–≤—Å–∫–∏–π –†—ã–Ω–æ–∫, —á—Ç–æ–±—ã –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é.
            </p>
          </Card>
        ) : (
          <TerritoryGrid
            territories={filteredTerritories}
            onUpgrade={handleUpgrade}
            upgradingTerritoryId={upgradingTerritoryId}
          />
        )}
      </motion.div>
    </motion.div>
  )
}

export default withPageTransition(TerritoriesPage)
