'use client'

import { motion } from 'framer-motion'
import { useState } from 'react'
import { Card } from '@/shared/ui/Card'
import { withPageTransition } from '@/lib/hooks/usePageTransition'
import { useNobleStore } from '@/modules/noble/store'
import { useTutorialProgress } from '@/modules/noble/hooks/useTutorialProgress'
import Link from 'next/link'

const container = {
  hidden: { opacity: 0 },
  show: {
    opacity: 1,
    transition: {
      staggerChildren: 0.1
    }
  }
}

interface TutorialStep {
  id: string
  title: string
  description: string
  requirements: string
  reward: string
  action: {
    text: string
    path: string
  }
}

interface TutorialSection {
  rank: string
  icon: string
  color: string
  steps: TutorialStep[]
}

const progressPath: TutorialSection[] = [
  {
    rank: '–ë–∞—Ä–æ–Ω',
    icon: 'üëë',
    color: 'from-amber-500/20 to-yellow-500/20',
    steps: [
      {
        id: 'baron-1',
        title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
        description: '–ö—É–ø–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –¥–µ—Ä–µ–≤–Ω—é –Ω–∞ –ö–æ—Ä–æ–ª–µ–≤—Å–∫–æ–º –†—ã–Ω–∫–µ',
        requirements: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 500 –∑–æ–ª–æ—Ç–∞ + 200 –≤–ª–∏—è–Ω–∏—è',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: +100 –æ–ø—ã—Ç–∞, +50 –≤–ª–∏—è–Ω–∏—è, +100 –∑–æ–ª–æ—Ç–∞',
        action: {
          text: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ä—ã–Ω–æ–∫',
          path: '/market'
        }
      },
      {
        id: 'baron-2',
        title: '–†–∞–∑–≤–∏—Ç–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏',
        description: '–£–ª—É—á—à–∏—Ç–µ –¥–µ—Ä–µ–≤–Ω—é –¥–æ 2 —É—Ä–æ–≤–Ω—è',
        requirements: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 1000 –∑–æ–ª–æ—Ç–∞ + 400 –≤–ª–∏—è–Ω–∏—è',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: +200 –æ–ø—ã—Ç–∞, +100 –≤–ª–∏—è–Ω–∏—è, +200 –∑–æ–ª–æ—Ç–∞',
        action: {
          text: '–ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è–º',
          path: '/territories'
        }
      },
      {
        id: 'baron-3',
        title: '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è',
        description: '–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –≤—Ç–æ—Ä—É—é –¥–µ—Ä–µ–≤–Ω—é',
        requirements: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 500 –∑–æ–ª–æ—Ç–∞ + 200 –≤–ª–∏—è–Ω–∏—è',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: +300 –æ–ø—ã—Ç–∞, +150 –≤–ª–∏—è–Ω–∏—è, +300 –∑–æ–ª–æ—Ç–∞',
        action: {
          text: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ä—ã–Ω–æ–∫',
          path: '/market'
        }
      }
    ]
  },
  {
    rank: '–í–∏–∫–æ–Ω—Ç',
    icon: 'üëëüëë',
    color: 'from-emerald-500/20 to-teal-500/20',
    steps: [
      {
        id: 'viscount-1',
        title: '–ì–æ—Ä–Ω–æ–µ –¥–µ–ª–æ',
        description: '–ü–æ—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —à–∞—Ö—Ç—É',
        requirements: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 800 –∑–æ–ª–æ—Ç–∞ + 300 –≤–ª–∏—è–Ω–∏—è',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: +400 –æ–ø—ã—Ç–∞, +200 –≤–ª–∏—è–Ω–∏—è',
        action: {
          text: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ä—ã–Ω–æ–∫',
          path: '/market'
        }
      },
      {
        id: 'viscount-2',
        title: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
        description: '–£–ª—É—á—à–∏—Ç–µ –≤—Å–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –¥–æ 3 —É—Ä–æ–≤–Ω—è',
        requirements: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 1500 –∑–æ–ª–æ—Ç–∞ + 600 –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∫–∞–∂–¥—É—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: +500 –æ–ø—ã—Ç–∞, +250 –≤–ª–∏—è–Ω–∏—è',
        action: {
          text: '–ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è–º',
          path: '/territories'
        }
      },
      {
        id: 'viscount-3',
        title: '–ì–æ—Ä–Ω—ã–π –º–∞–≥–Ω–∞—Ç',
        description: '–ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≤—Ç–æ—Ä—É—é —à–∞—Ö—Ç—É',
        requirements: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 800 –∑–æ–ª–æ—Ç–∞ + 300 –≤–ª–∏—è–Ω–∏—è',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: +600 –æ–ø—ã—Ç–∞, +300 –≤–ª–∏—è–Ω–∏—è',
        action: {
          text: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ä—ã–Ω–æ–∫',
          path: '/market'
        }
      }
    ]
  },
  {
    rank: '–ì—Ä–∞—Ñ',
    icon: 'üëëüëëüëë',
    color: 'from-purple-500/20 to-pink-500/20',
    steps: [
      {
        id: 'count-1',
        title: '–í–æ–µ–Ω–Ω–∞—è –º–æ—â—å',
        description: '–ü–æ—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫—Ä–µ–ø–æ—Å—Ç—å',
        requirements: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 1200 –∑–æ–ª–æ—Ç–∞ + 500 –≤–ª–∏—è–Ω–∏—è',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: +800 –æ–ø—ã—Ç–∞, +400 –≤–ª–∏—è–Ω–∏—è',
        action: {
          text: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ä—ã–Ω–æ–∫',
          path: '/market'
        }
      },
      {
        id: 'count-2',
        title: '–ò–º–ø–µ—Ä–∏—è –ø—Ä–æ—Ü–≤–µ—Ç–∞–µ—Ç',
        description: '–£–ª—É—á—à–∏—Ç–µ –≤—Å–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –¥–æ 5 —É—Ä–æ–≤–Ω—è',
        requirements: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ: 2500 –∑–æ–ª–æ—Ç–∞ + 1000 –≤–ª–∏—è–Ω–∏—è –Ω–∞ –∫–∞–∂–¥—É—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: +1000 –æ–ø—ã—Ç–∞, +500 –≤–ª–∏—è–Ω–∏—è',
        action: {
          text: '–ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è–º',
          path: '/territories'
        }
      },
      {
        id: 'count-3',
        title: '–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –≤–ª–∞—Å—Ç—å',
        description: '–í–ª–∞–¥–µ–π—Ç–µ –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π (–¥–µ—Ä–µ–≤–Ω—è, —à–∞—Ö—Ç–∞, –∫—Ä–µ–ø–æ—Å—Ç—å)',
        requirements: '–í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: —Ç–∏—Ç—É–ª –ì—Ä–∞—Ñ–∞ –∏ –≤—Å–µ –µ–≥–æ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏',
        action: {
          text: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ä—ã–Ω–æ–∫',
          path: '/market'
        }
      }
    ]
  }
]

function TutorialPage() {
  const noble = useNobleStore(state => state.noble)
  const currentRank = noble?.rank || '–ë–∞—Ä–æ–Ω'
  const tutorialProgress = useTutorialProgress()
  
  // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–Ω–≥–∞
  const currentRankIndex = progressPath.findIndex(p => p.rank === currentRank)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —à–∞–≥–∞
  const isStepCompleted = (rankKey: 'baron' | 'viscount' | 'count', stepIndex: number) => {
    if (!tutorialProgress?.progress?.[rankKey]) return false
    return tutorialProgress.progress[rankKey][stepIndex]?.completed || false
  }

  // –ï—Å–ª–∏ tutorialProgress –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
  if (!tutorialProgress?.progress) {
    return (
      <div className="flex items-center justify-center min-h-[60vh]">
        <div className="w-12 h-12 border-4 border-primary/20 border-t-primary rounded-full animate-spin" />
      </div>
    )
  }

  return (
    <motion.div
      variants={container}
      initial="hidden"
      animate="show"
      className="space-y-8"
    >
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <Card gradient="from-purple-500/20 to-pink-500/20" className="p-8">
        <h1 className="text-3xl font-bold text-white mb-2">–ü—É—Ç—å –∫ –≤–µ–ª–∏—á–∏—é</h1>
        <p className="text-gray-300">
          –ü—Ä–æ–π–¥–∏—Ç–µ –ø—É—Ç—å –æ—Ç –ë–∞—Ä–æ–Ω–∞ –¥–æ –ì—Ä–∞—Ñ–∞, –≤—ã–ø–æ–ª–Ω—è—è –∑–∞–¥–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–∏–≤–∞—è —Å–≤–æ–∏ –≤–ª–∞–¥–µ–Ω–∏—è
        </p>
        {noble && (
          <div className="mt-4 flex gap-4">
            <div className="px-4 py-2 bg-white/10 rounded-lg">
              <span className="text-white font-medium">
                –¢–µ–∫—É—â–∏–π —Ç–∏—Ç—É–ª: {noble.rank}
              </span>
            </div>
            <div className="px-4 py-2 bg-white/10 rounded-lg">
              <span className="text-white font-medium">
                –û–ø—ã—Ç: {noble.experience} / {noble.experienceForNextLevel}
              </span>
            </div>
          </div>
        )}
      </Card>

      {/* –ü—É—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—è */}
      <div className="grid gap-8">
        {progressPath.map((pathSection, pathIndex) => {
          const isCurrentRank = pathSection.rank === currentRank
          const isPastRank = pathIndex < currentRankIndex
          const isFutureRank = pathIndex > currentRankIndex
          const rankKey = pathSection.rank.toLowerCase() as 'baron' | 'viscount' | 'count'

          return (
            <Card
              key={pathSection.rank}
              gradient={pathSection.color}
              className={`p-6 ${isFutureRank ? 'opacity-50' : ''}`}
            >
              {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–Ω–≥–∞ */}
              <div className="flex items-center gap-4 mb-6">
                <span className="text-3xl">{pathSection.icon}</span>
                <h2 className="text-2xl font-bold text-white">
                  {pathSection.rank}
                  {isCurrentRank && (
                    <span className="ml-3 text-sm font-normal text-white/60">
                      (–¢–µ–∫—É—â–∏–π —Ç–∏—Ç—É–ª)
                    </span>
                  )}
                </h2>
              </div>

              {/* –®–∞–≥–∏ —Ä–∞–∑–≤–∏—Ç–∏—è */}
              <div className="grid gap-4">
                {pathSection.steps.map((step, stepIndex) => {
                  const completed = isStepCompleted(rankKey, stepIndex)
                  
                  return (
                    <div
                      key={step.id}
                      className={`
                        relative p-6 rounded-lg
                        ${completed ? 'bg-white/10' : 'bg-white/5'}
                        ${isPastRank ? 'opacity-50' : ''}
                      `}
                    >
                      {/* –õ–∏–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
                      {stepIndex < pathSection.steps.length - 1 && (
                        <div className="absolute left-8 top-[5.5rem] bottom-0 w-0.5 bg-white/10" />
                      )}

                      <div className="flex items-start gap-6">
                        {/* –ù–æ–º–µ—Ä —à–∞–≥–∞ */}
                        <div 
                          className={`
                            flex-shrink-0 w-12 h-12 rounded-full flex items-center justify-center
                            ${completed ? 'bg-emerald-500/20' : 'bg-white/10'}
                          `}
                        >
                          {completed ? (
                            <span className="text-2xl">‚úì</span>
                          ) : (
                            <span className="text-lg font-bold text-white">
                              {stepIndex + 1}
                            </span>
                          )}
                        </div>

                        {/* –°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —à–∞–≥–∞ */}
                        <div className="flex-grow">
                          <h3 className="text-xl font-medium text-white mb-2">
                            {step.title}
                            {completed && (
                              <span className="ml-3 text-sm text-emerald-400">
                                –í—ã–ø–æ–ª–Ω–µ–Ω–æ!
                              </span>
                            )}
                          </h3>
                          <p className="text-gray-300 mb-4">
                            {step.description}
                          </p>
                          <div className="space-y-2 mb-4">
                            <p className="text-amber-300 text-sm">
                              {step.requirements}
                            </p>
                            <p className="text-emerald-300 text-sm">
                              {step.reward}
                            </p>
                          </div>
                          {!completed && (
                            <Link
                              href={step.action.path}
                              className="inline-flex items-center px-4 py-2 rounded-lg bg-white/10 hover:bg-white/20 transition-colors text-white text-sm"
                            >
                              {step.action.text} ‚Üí
                            </Link>
                          )}
                        </div>
                      </div>
                    </div>
                  )
                })}
              </div>
            </Card>
          )
        })}
      </div>
    </motion.div>
  )
}

export default withPageTransition(TutorialPage) 