'use client'

import { useNobleStore } from '../store'
import { Card } from '@/shared/ui/Card'
import { NOBLE_PATHS, type NoblePath } from '../types/noble-path'
import { useGameNotifications } from '@/lib/hooks/useGameNotifications'
import { useTutorialProgress } from '../hooks/useTutorialProgress'
import { useNoblePathProgress } from '@/lib/hooks/useNoblePathProgress'
import { NobleRankType } from '../types'
import { useTerritoryStore } from '@/modules/territory/store'
import { useEffect } from 'react'
import { Territory } from '@/modules/territory/types/territory'

function NoblePathCard({ path }: { path: NoblePath }) {
  const { completedPaths } = useNoblePathProgress()
  const tutorialProgress = useTutorialProgress()
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—ã–ø–æ–ª–Ω–µ–Ω –ª–∏ —ç—Ç–∞–ø –ø—É—Ç–∏
  const isCompleted = completedPaths.includes(path.id)
  const isAvailable = !isCompleted // –¢–µ–ø–µ—Ä—å –≤—Å–µ –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –ø—É—Ç–∏ —Å—á–∏—Ç–∞—é—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞

  const difficultyColors = {
    easy: 'bg-green-500',
    medium: 'bg-yellow-500',
    hard: 'bg-red-500',
    epic: 'bg-purple-500'
  }

  return (
    <div
      className={`
        w-full p-4 rounded-lg border text-left transition-all duration-200
        ${isCompleted 
          ? 'bg-green-500/20 border-green-500/50' 
          : 'bg-white/10 border-amber-500/50'
        }
        ${path.isTutorialPath ? 'border-l-4 border-l-purple-500' : ''}
      `}
    >
      <div className="flex items-center justify-between mb-2">
        <div className="flex items-center gap-2">
          <h3 className="font-medieval text-lg">{path.name}</h3>
          {path.isTutorialPath && (
            <span className="text-xs px-2 py-0.5 rounded bg-purple-500/20 text-purple-300">
              –û—Å–Ω–æ–≤—ã
            </span>
          )}
          {isCompleted && (
            <span className="text-xs px-2 py-0.5 rounded bg-green-500/20 text-green-300">
              –ü—Ä–æ–π–¥–µ–Ω–æ ‚úì
            </span>
          )}
        </div>
        <div className="flex items-center gap-2">
          <span className={`px-2 py-0.5 rounded text-xs ${difficultyColors[path.difficulty]}`}>
            {path.difficulty === 'easy' ? '–ù–ê–ß–ê–õ–¨–ù–´–ô' :
             path.difficulty === 'medium' ? '–°–†–ï–î–ù–ò–ô' :
             path.difficulty === 'hard' ? '–°–õ–û–ñ–ù–´–ô' :
             '–≠–ü–ò–ß–ï–°–ö–ò–ô'}
          </span>
        </div>
      </div>
      
      <p className="text-sm text-gray-400 mb-3">
        {path.description}
      </p>

      <div className="flex flex-wrap gap-2 mb-3">
        {path.requirements.rank && (
          <span className="text-xs px-2 py-1 rounded bg-purple-500/20 text-purple-300">
            üëë {path.requirements.rank}
          </span>
        )}
        {path.requirements.influence && (
          <span className="text-xs px-2 py-1 rounded bg-blue-500/20 text-blue-300">
            ‚öúÔ∏è {path.requirements.influence}
          </span>
        )}
        {path.requirements.gold && (
          <span className="text-xs px-2 py-1 rounded bg-yellow-500/20 text-yellow-300">
            üí∞ {path.requirements.gold}
          </span>
        )}
        {path.requirements.territories && (
          <span className="text-xs px-2 py-1 rounded bg-green-500/20 text-green-300">
            üè∞ {path.requirements.territories}
          </span>
        )}
      </div>

      <div className="flex items-center justify-between text-sm">
        <div className="flex items-center gap-2">
          <span className="text-gray-400">–ù–∞–≥—Ä–∞–¥—ã:</span>
          {path.rewards.gold && (
            <span className="text-yellow-500">üí∞ {path.rewards.gold}</span>
          )}
          {path.rewards.influence && (
            <span className="text-blue-500">‚öúÔ∏è {path.rewards.influence}</span>
          )}
          {path.rewards.experience && (
            <span className="text-purple-500">‚ú® {path.rewards.experience}</span>
          )}
        </div>
      </div>

      {!isCompleted && path.isTutorialPath && (
        <div className="mt-2 text-xs text-purple-300">
          ‚ú® –°–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –≤–∞—à–µ–≥–æ –±–ª–∞–≥–æ—Ä–æ–¥–Ω–æ–≥–æ –¥–æ–º–∞
        </div>
      )}
    </div>
  )
}

export function NoblePathBoard() {
  const noble = useNobleStore(state => state.noble)
  const territories = useTerritoryStore((state: { territories: Territory[] }) => state.territories)
  const { completedPaths } = useNoblePathProgress()

  if (!noble) return null

  // –°–Ω–∞—á–∞–ª–∞ –æ—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º —ç—Ç–∞–ø—ã –æ–±—É—á–µ–Ω–∏—è
  const tutorialPaths = Object.values(NOBLE_PATHS).filter(p => p.isTutorialPath)
  const regularPaths = Object.values(NOBLE_PATHS).filter(p => !p.isTutorialPath)

  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –æ–±—ã—á–Ω—ã–µ —ç—Ç–∞–ø—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const pathsByCategory = regularPaths.reduce((acc, path) => {
    if (!acc[path.category]) {
      acc[path.category] = []
    }
    acc[path.category].push(path)
    return acc
  }, {} as Record<string, NoblePath[]>)

  const categoryNames = {
    development: '–≠–∫–æ–Ω–æ–º–∏–∫–∞',
    trade: '–¢–æ—Ä–≥–æ–≤–ª—è',
    diplomacy: '–î–∏–ø–ª–æ–º–∞—Ç–∏—è',
    research: '–ó–Ω–∞–Ω–∏—è',
    strategy: '–í–æ–µ–Ω–Ω–æ–µ –¥–µ–ª–æ'
  }

  return (
    <div className="space-y-8">
      {/* –°–µ–∫—Ü–∏—è –æ–±—É—á–∞—é—â–∏—Ö —ç—Ç–∞–ø–æ–≤ */}
      <Card gradient="from-purple-500/20 to-blue-500/20" className="p-6">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h2 className="text-2xl font-bold text-white">–î–æ—Ä–æ–≥–∞ –∫ –≤–µ–ª–∏—á–∏—é</h2>
            <p className="text-gray-300">
              –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –±–ª–∞–≥–æ—Ä–æ–¥–Ω–æ–≥–æ –¥–æ–º–∞. –í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –≤ –∏–≥—Ä–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–≤–∏–≥–∞—Ç—å—Å—è –ø–æ –ø—É—Ç–∏.
            </p>
          </div>
        </div>

        <div className="grid grid-cols-1 gap-4">
          {tutorialPaths.map(path => (
            <NoblePathCard
              key={path.id}
              path={path}
            />
          ))}
        </div>
      </Card>

      {/* –°–µ–∫—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ */}
      <Card gradient="from-blue-500/20 to-purple-500/20" className="p-6">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h2 className="text-2xl font-bold text-white">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
            <p className="text-gray-300">
              –û—Å–æ–±—ã–µ —Ü–µ–ª–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –≤–∞—à–µ–≥–æ –±–ª–∞–≥–æ—Ä–æ–¥–Ω–æ–≥–æ –¥–æ–º–∞
            </p>
          </div>
        </div>

        <div className="space-y-6">
          {Object.entries(pathsByCategory).map(([category, paths]) => (
            <div key={category}>
              <h3 className="text-xl font-medieval mb-4 text-blue-300">
                {categoryNames[category as keyof typeof categoryNames]}
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                {paths.map(path => (
                  <NoblePathCard
                    key={path.id}
                    path={path}
                  />
                ))}
              </div>
            </div>
          ))}
        </div>
      </Card>
    </div>
  )
} 