import { useTutorialProgress, type TutorialProgress, type TutorialStep } from '../hooks/useTutorialProgress'
import { Card } from '@/shared/ui/card'
import { useNobleStore } from '../store'
import Link from 'next/link'
import { LockClosedIcon, LockOpenIcon } from '@heroicons/react/24/solid'
import { NobleRankType } from '../types'
import { rankTitles } from '../constants'

interface TutorialSection {
  rank: NobleRankType
  icon: string
  color: string
  steps: {
    id: string
    title: string
    description: string
    reward: string
    action: {
      text: string
      path: string
    }
  }[]
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–Ω–≥–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ
const RANK_ORDER: NobleRankType[] = ['–±–∞—Ä–æ–Ω', '–≤–∏–∫–æ–Ω—Ç', '–≥—Ä–∞—Ñ', '–º–∞—Ä–∫–∏–∑', '–≥–µ—Ä—Ü–æ–≥', '–∫–æ—Ä–æ–ª—å']

// –ú–∞–ø–ø–∏–Ω–≥ —Ä–∞–Ω–≥–æ–≤ –Ω–∞ –∫–ª—é—á–∏ –≤ –æ–±—ä–µ–∫—Ç–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
const RANK_KEYS: Record<NobleRankType, keyof TutorialProgress> = {
  '–±–∞—Ä–æ–Ω': 'baron',
  '–≤–∏–∫–æ–Ω—Ç': 'viscount',
  '–≥—Ä–∞—Ñ': 'count',
  '–º–∞—Ä–∫–∏–∑': 'marquis',
  '–≥–µ—Ä—Ü–æ–≥': 'duke',
  '–∫–æ—Ä–æ–ª—å': 'king'
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
const getNextRank = (currentRank: NobleRankType): NobleRankType | null => {
  const currentIndex = RANK_ORDER.indexOf(currentRank)
  if (currentIndex === -1 || currentIndex === RANK_ORDER.length - 1) return null
  return RANK_ORDER[currentIndex + 1]
}

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–Ω–≥–∞
const progressPath: TutorialSection[] = [
  {
    rank: '–±–∞—Ä–æ–Ω',
    icon: 'üëë',
    color: 'from-amber-500/20 to-orange-500/20',
    steps: [
      {
        id: 'baron-1',
        title: '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏',
        description: '–ö—É–ø–∏—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –¥–µ—Ä–µ–≤–Ω—é –Ω–∞ –ö–æ—Ä–æ–ª–µ–≤—Å–∫–æ–º –†—ã–Ω–∫–µ',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: +100 –æ–ø—ã—Ç–∞, +50 –≤–ª–∏—è–Ω–∏—è, +100 –∑–æ–ª–æ—Ç–∞',
        action: {
          text: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ä—ã–Ω–æ–∫',
          path: '/market'
        }
      },
      {
        id: 'baron-2',
        title: '–†–∞–∑–≤–∏—Ç–∏–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏',
        description: '–£–ª—É—á—à–∏—Ç–µ –¥–µ—Ä–µ–≤–Ω—é –¥–æ 2 —É—Ä–æ–≤–Ω—è',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: +200 –æ–ø—ã—Ç–∞, +100 –≤–ª–∏—è–Ω–∏—è, +200 –∑–æ–ª–æ—Ç–∞',
        action: {
          text: '–ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è–º',
          path: '/territories'
        }
      },
      {
        id: 'baron-3',
        title: '–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ –≤–ª–∏—è–Ω–∏—è',
        description: '–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –≤—Ç–æ—Ä—É—é –¥–µ—Ä–µ–≤–Ω—é',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: +300 –æ–ø—ã—Ç–∞, +150 –≤–ª–∏—è–Ω–∏—è, +300 –∑–æ–ª–æ—Ç–∞',
        action: {
          text: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ä—ã–Ω–æ–∫',
          path: '/market'
        }
      }
    ]
  },
  {
    rank: '–≤–∏–∫–æ–Ω—Ç',
    icon: 'üëëüëë',
    color: 'from-emerald-500/20 to-teal-500/20',
    steps: [
      {
        id: 'viscount-1',
        title: '–ì–æ—Ä–Ω–æ–µ –¥–µ–ª–æ',
        description: '–ü–æ—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —à–∞—Ö—Ç—É',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: +400 –æ–ø—ã—Ç–∞, +200 –≤–ª–∏—è–Ω–∏—è',
        action: {
          text: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ä—ã–Ω–æ–∫',
          path: '/market'
        }
      },
      {
        id: 'viscount-2',
        title: '–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ',
        description: '–£–ª—É—á—à–∏—Ç–µ –≤—Å–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –¥–æ 3 —É—Ä–æ–≤–Ω—è',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: +500 –æ–ø—ã—Ç–∞, +250 –≤–ª–∏—è–Ω–∏—è',
        action: {
          text: '–ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è–º',
          path: '/territories'
        }
      },
      {
        id: 'viscount-3',
        title: '–ì–æ—Ä–Ω—ã–π –º–∞–≥–Ω–∞—Ç',
        description: '–ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≤—Ç–æ—Ä—É—é —à–∞—Ö—Ç—É',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: +600 –æ–ø—ã—Ç–∞, +300 –≤–ª–∏—è–Ω–∏—è',
        action: {
          text: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ä—ã–Ω–æ–∫',
          path: '/market'
        }
      }
    ]
  },
  {
    rank: '–≥—Ä–∞—Ñ',
    icon: 'üëëüëëüëë',
    color: 'from-purple-500/20 to-pink-500/20',
    steps: [
      {
        id: 'count-1',
        title: '–í–æ–µ–Ω–Ω–∞—è –º–æ—â—å',
        description: '–ü–æ—Å—Ç—Ä–æ–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫—Ä–µ–ø–æ—Å—Ç—å',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: +800 –æ–ø—ã—Ç–∞, +400 –≤–ª–∏—è–Ω–∏—è',
        action: {
          text: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ä—ã–Ω–æ–∫',
          path: '/market'
        }
      },
      {
        id: 'count-2',
        title: '–ò–º–ø–µ—Ä–∏—è –ø—Ä–æ—Ü–≤–µ—Ç–∞–µ—Ç',
        description: '–£–ª—É—á—à–∏—Ç–µ –≤—Å–µ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏ –¥–æ 5 —É—Ä–æ–≤–Ω—è',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: +1000 –æ–ø—ã—Ç–∞, +500 –≤–ª–∏—è–Ω–∏—è',
        action: {
          text: '–ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è–º',
          path: '/territories'
        }
      },
      {
        id: 'count-3',
        title: '–ê–±—Å–æ–ª—é—Ç–Ω–∞—è –≤–ª–∞—Å—Ç—å',
        description: '–í–ª–∞–¥–µ–π—Ç–µ –≤—Å–µ–º–∏ —Ç–∏–ø–∞–º–∏ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π (–¥–µ—Ä–µ–≤–Ω—è, —à–∞—Ö—Ç–∞, –∫—Ä–µ–ø–æ—Å—Ç—å)',
        reward: '–ù–∞–≥—Ä–∞–¥–∞: —Ç–∏—Ç—É–ª –ì—Ä–∞—Ñ–∞ –∏ –≤—Å–µ –µ–≥–æ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏',
        action: {
          text: '–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Ä—ã–Ω–æ–∫',
          path: '/market'
        }
      }
    ]
  }
]

function TutorialStep({ 
  step, 
  isAvailable, 
  isCompleted,
  showConnector = true
}: {
  step: TutorialSection['steps'][0]
  isAvailable: boolean
  isCompleted: boolean
  showConnector?: boolean
}) {
  return (
    <div className="relative">
      {/* –ö–æ–Ω–Ω–µ–∫—Ç–æ—Ä –º–µ–∂–¥—É —à–∞–≥–∞–º–∏ */}
      {showConnector && (
        <div className="absolute left-6 -top-8 w-0.5 h-8 bg-gradient-to-b from-transparent to-white/20" />
      )}
      
      <div className={`
        relative p-4 rounded-lg border transition-all duration-200
        ${isCompleted 
          ? 'bg-white/20 border-green-500/50' 
          : isAvailable
            ? 'bg-white/10 border-amber-500/50 hover:bg-white/20'
            : 'bg-white/5 border-white/10 opacity-50'
        }
      `}>
        {/* –ò–∫–æ–Ω–∫–∞ –∑–∞–º–∫–∞ */}
        <div className={`
          absolute -left-3 top-1/2 -translate-y-1/2
          w-6 h-6 rounded-full flex items-center justify-center
          ${isCompleted 
            ? 'bg-green-500' 
            : isAvailable 
              ? 'bg-amber-500' 
              : 'bg-gray-500'
          }
        `}>
          {isCompleted ? (
            <LockOpenIcon className="w-3 h-3 text-white" />
          ) : (
            <LockClosedIcon className="w-3 h-3 text-white" />
          )}
        </div>

        <div className="flex items-center justify-between mb-2">
          <h3 className="font-medieval text-lg">{step.title}</h3>
          {isCompleted && (
            <span className="text-xs px-2 py-0.5 rounded bg-green-500/20 text-green-300">
              –í—ã–ø–æ–ª–Ω–µ–Ω–æ ‚úì
            </span>
          )}
        </div>
        
        <p className="text-sm text-gray-400 mb-3">
          {step.description}
        </p>

        <div className="space-y-2 mb-4">
          <div className="text-xs px-2 py-1 rounded bg-purple-500/20 text-purple-300">
            {step.reward}
          </div>
        </div>

        <Link 
          href={step.action.path}
          className={`
            inline-flex items-center px-3 py-1 rounded text-sm
            transition-colors duration-200
            ${isAvailable
              ? 'bg-amber-500 hover:bg-amber-600 text-black'
              : 'bg-gray-500/20 text-gray-400 cursor-not-allowed'
            }
          `}
        >
          {step.action.text}
        </Link>
      </div>
    </div>
  )
}

export function TutorialProgress() {
  const { progress, isStepAvailable } = useTutorialProgress()
  const noble = useNobleStore(state => state.noble)

  if (!noble || !progress) return null

  const currentRank = noble.rank as NobleRankType
  const nextRank = getNextRank(currentRank)

  // –§–∏–ª—å—Ç—Ä—É–µ–º —Å–µ–∫—Ü–∏–∏, –ø–æ–∫–∞–∑—ã–≤–∞—è —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â–∏–π –∏ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–Ω–≥
  const visibleSections = progressPath.filter(section => 
    section.rank === currentRank || section.rank === nextRank
  )

  return (
    <div className="space-y-12">
      {visibleSections.map((section) => {
        const rankKey = RANK_KEYS[section.rank]
        const isCurrentRank = section.rank === currentRank
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ –≤–µ—Å—å —Ä–∞–∑–¥–µ–ª
        const currentRankProgress = progress[RANK_KEYS[currentRank]] as TutorialStep[]
        const isSectionAvailable = isCurrentRank || 
          (currentRank && 
           currentRankProgress?.length > 0 &&
           currentRankProgress.every(step => step.completed))

        return (
          <Card
            key={section.rank}
            gradient={section.color}
            className={`p-6 transition-all duration-200 ${
              !isSectionAvailable && 'opacity-50'
            }`}
          >
            <div className="flex items-center gap-3 mb-6">
              <span className="text-2xl">{section.icon}</span>
              <div>
                <h2 className="text-2xl font-bold text-white">
                  {rankTitles[section.rank as NobleRankType]}
                  {isCurrentRank && (
                    <span className="ml-3 text-sm font-normal text-white/60">
                      (–¢–µ–∫—É—â–∏–π —Ç–∏—Ç—É–ª)
                    </span>
                  )}
                </h2>
                <p className="text-gray-300">
                  {isCurrentRank 
                    ? '–ó–∞–¥–∞–Ω–∏—è –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –≤–ª–∏—è–Ω–∏—è'
                    : `–ü—É—Ç—å –∫ —Ç–∏—Ç—É–ª—É ${rankTitles[section.rank as NobleRankType]}–∞`
                  }
                </p>
              </div>
            </div>

            <div className="space-y-8 pl-8">
              {section.steps.map((step, stepIndex) => {
                const stepProgress = progress[rankKey]
                const isCompleted = Array.isArray(stepProgress) && stepProgress[stepIndex]?.completed
                const isAvailable = isSectionAvailable

                return (
                  <TutorialStep
                    key={step.id}
                    step={step}
                    isAvailable={!!isAvailable}
                    isCompleted={!!isCompleted}
                    showConnector={stepIndex > 0}
                  />
                )
              })}
            </div>

            {isCurrentRank && nextRank && (
              <div className="mt-6 pt-6 border-t border-white/10">
                <p className="text-sm text-gray-400">
                  –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–∏—Ç—É–ª {rankTitles[nextRank]}–∞
                </p>
              </div>
            )}
          </Card>
        )
      })}
    </div>
  )
} 