'use client'

import { useState } from 'react'
import { v4 as uuidv4 } from 'uuid'
import { useNobleStore } from '@/modules/noble/store'
import { useTerritoryStore } from '../store'
import { useGameNotifications } from '@/lib/hooks/useGameNotifications'
import { TERRITORY_TYPES, TerritoryType } from '../types'

export function AddTerritoryButton() {
  const [selectedType, setSelectedType] = useState<TerritoryType>('camp')
  const noble = useNobleStore(state => state.noble)
  const addTerritory = useTerritoryStore(state => state.addTerritory)
  const { notifyResourceReward, notifyError } = useGameNotifications()

  const handleAddTerritory = () => {
    if (!noble) return

    const typeInfo = TERRITORY_TYPES[selectedType]
    const requirements = typeInfo.requirements

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤
    if (
      noble.resources.gold >= requirements.gold &&
      noble.resources.influence >= requirements.influence
    ) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é
      const territory = {
        id: uuidv4(),
        name: `${typeInfo.name} ${noble.stats.territoriesOwned + 1}`,
        type: selectedType,
        level: 1,
        production: {
          gold: typeInfo.baseProduction.gold,
          influence: typeInfo.baseProduction.influence
        },
        status: {
          happiness: 50,
          stability: 50,
          development: 50,
          overall: 50,  // Initial overall is average of happiness, stability, and development
          isProsperous: false  // New territories start as not prosperous
        },
        buildings: [],
        connections: [],
        development: 50,
        maxDevelopment: 100
      }

      // –°–Ω–∏–º–∞–µ–º —Ä–µ—Å—É—Ä—Å—ã
      useNobleStore.getState().removeResources({
        gold: requirements.gold,
        influence: requirements.influence
      })

      // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é
      addTerritory(territory)

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —É—Å–ø–µ—Ö–µ
      notifyResourceReward({
        gold: territory.production.gold,
        influence: territory.production.influence
      })
    } else {
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—à–∏–±–∫–µ
      notifyError(
        '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤',
        `–¢—Ä–µ–±—É–µ—Ç—Å—è ${requirements.gold} –∑–æ–ª–æ—Ç–∞ –∏ ${requirements.influence} –≤–ª–∏—è–Ω–∏—è`
      )
    }
  }

  return (
    <div className="flex items-center gap-4">
      <select
        value={selectedType}
        onChange={e => setSelectedType(e.target.value as TerritoryType)}
        className="select select-bordered"
      >
        {Object.entries(TERRITORY_TYPES).map(([type, info]) => (
          <option key={type} value={type}>
            {info.name} (
            {info.requirements.gold}ü™ô,
            {info.requirements.influence}‚öúÔ∏è)
          </option>
        ))}
      </select>

      <button
        onClick={handleAddTerritory}
        disabled={!noble}
        className="btn btn-primary"
      >
        –î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—é
      </button>
    </div>
  )
}
