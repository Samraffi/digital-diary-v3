'use client'

import { useEffect, useRef } from 'react'
import { useNobleStore } from '@/modules/noble/store'
import { useTerritoryStore } from '@/modules/territory/store'
import { useNotifications } from '@/shared/ui/notifications/NotificationsProvider'
import { toast } from 'react-hot-toast'

export function useGameNotifications() {
  const { addNotification } = useNotifications()
  const noble = useNobleStore(state => state.noble)
  const territories = useTerritoryStore(state => state.territories)
  
  const prevRankRef = useRef<string | null>(null)
  const prevLevelRef = useRef<number | null>(null)
  const prevTerritoriesCountRef = useRef<number | null>(null)

  useEffect(() => {
    if (!noble) return

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞
    const currentTitle = noble.titles?.[0]
    if (currentTitle && prevRankRef.current && prevRankRef.current !== currentTitle.toString()) {
      addNotification({
        title: '–ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞!',
        message: `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ä–∞–Ω–≥–∞ ${currentTitle.toString().charAt(0).toUpperCase() + currentTitle.toString().slice(1)}`,
        type: 'success',
        duration: 8000
      })
    }
    prevRankRef.current = currentTitle?.toString() || null

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    if (prevLevelRef.current && prevLevelRef.current < noble.level) {
      addNotification({
        title: '–ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!',
        message: `–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${noble.level} —É—Ä–æ–≤–Ω—è`,
        type: 'success',
        duration: 6000
      })
    }
    prevLevelRef.current = noble.level

  }, [noble, addNotification])

  useEffect(() => {
    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
    const currentCount = territories.length
    if (prevTerritoriesCountRef.current !== null && prevTerritoriesCountRef.current < currentCount) {
      addNotification({
        title: '–ù–æ–≤–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è!',
        message: `–ü–æ–ª—É—á–µ–Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è: ${territories[territories.length - 1].name}`,
        type: 'info',
        duration: 5000
      })
    }
    prevTerritoriesCountRef.current = currentCount

  }, [territories, addNotification])

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const notifyResourceReward = (resources: { gold?: number; influence?: number }) => {
    const message = Object.entries(resources)
      .map(([type, amount]) => `+${amount} ${type === 'gold' ? 'ü™ô' : '‚öúÔ∏è'}`)
      .join(' ')
    
    toast.success(message, {
      duration: 3000,
      position: 'bottom-right'
    })
  }

  const notifyAchievement = (name: string, description: string) => {
    toast.success(`üèÜ ${name}\n${description}`, {
      duration: 4000,
      position: 'bottom-right'
    })
  }

  const notifyError = (title: string, message: string) => {
    toast.error(`‚ùå ${title}\n${message}`, {
      duration: 4000,
      position: 'bottom-right'
    })
  }

  const notifyInfo = (title: string, message: string) => {
    toast(`‚ÑπÔ∏è ${title}\n${message}`, {
      duration: 6000,
      position: 'bottom-right'
    })
  }

  return {
    notifyResourceReward,
    notifyAchievement,
    notifyError,
    notifyInfo
  }
}
