'use client'

import { useEffect, useRef } from 'react'
import { usePathname } from 'next/navigation'
import { useSelector } from 'react-redux'
import { RootState } from '@/lib/redux/store'
import { useNobleStore } from '@/modules/noble/store'
import { toast } from 'react-hot-toast'
import { NobleRank } from '@/modules/noble/types'
import { rankRequirements } from '@/modules/noble/constants'

const toastOptions = {
  duration: 4000,
  position: 'bottom-right' as const,
  className: 'cursor-pointer',
  style: {
    minWidth: '200px',
  },
  onClick: (t: any) => toast.dismiss(t.id)
}

export function useGameNotifications() {
  const pathname = usePathname()
  const { noble } = useNobleStore();
  const territories = useSelector((state: RootState) => state.territory.territories)
  
  const prevRankRef = useRef<string | null>(null)
  const prevLevelRef = useRef<number | null>(null)
  const prevTerritoriesCountRef = useRef<number | null>(null)
  const prevAchievementsRef = useRef<number | null>(null)

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const shouldShowNotifications = () => pathname !== '/road-to-glory'

  useEffect(() => {
    if (!noble || !shouldShowNotifications()) return

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞
    const currentTitle = noble.titles?.[0]
    if (currentTitle && prevRankRef.current && prevRankRef.current !== currentTitle.toString()) {
      toast.success(`üéâ –ü–æ–≤—ã—à–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞!\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ä–∞–Ω–≥–∞ ${currentTitle.toString().charAt(0).toUpperCase() + currentTitle.toString().slice(1)}`, {
        ...toastOptions,
        duration: 8000,
      })

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞
      const nextRank = getNextRank(currentTitle.toString() as NobleRank)
      if (nextRank) {
        const requirements = rankRequirements[nextRank]
        notifyRankProgress(nextRank, requirements)
      }
    }
    prevRankRef.current = currentTitle?.toString() || null

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–≤—ã—à–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è
    if (prevLevelRef.current && prevLevelRef.current < noble.level) {
      toast.success(`‚≠ê –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!\n–í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ ${noble.level} —É—Ä–æ–≤–Ω—è`, {
        ...toastOptions,
        duration: 6000,
      })
    }
    prevLevelRef.current = noble.level

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
    if (prevAchievementsRef.current !== null && 
        prevAchievementsRef.current < noble.achievements.total) {
      const progress = calculateAchievementProgress(noble.achievements.total)
      if (progress.nextMilestone) {
        notifyAchievementProgress(progress)
      }
    }
    prevAchievementsRef.current = noble.achievements.total

  }, [noble, pathname])

  useEffect(() => {
    if (!shouldShowNotifications()) return

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π
    const currentCount = territories.length
    if (prevTerritoriesCountRef.current !== null && prevTerritoriesCountRef.current < currentCount) {
      toast.success(`üè∞ –ù–æ–≤–∞—è —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è!\n–ü–æ–ª—É—á–µ–Ω–∞ —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏—è: ${territories[territories.length - 1].name}`, {
        ...toastOptions,
        duration: 5000,
      })

      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–Ω–≥–∞
      if (noble?.rank) {
        const requirements = rankRequirements[noble.rank as NobleRank]
        notifyTerritoryProgress(currentCount, requirements.territories)
      }
    }
    prevTerritoriesCountRef.current = currentCount

  }, [territories, noble?.rank, pathname])

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–≥—Ä–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  const notifyResourceReward = (resources: { gold?: number; influence?: number }) => {
    if (!shouldShowNotifications()) return

    const message = Object.entries(resources)
      .map(([type, amount]) => `+${amount} ${type === 'gold' ? 'ü™ô' : '‚öúÔ∏è'}`)
      .join(' ')
    
    toast.success(message, {
      ...toastOptions,
      duration: 3000,
    })
  }

  const notifyAchievement = (name: string, description: string) => {
    if (!shouldShowNotifications()) return

    toast.success(`üèÜ ${name}\n${description}`, {
      ...toastOptions,
      duration: 4000,
    })
  }

  const notifyError = (title: string, message: string) => {
    if (!shouldShowNotifications()) return

    toast.error(`‚ùå ${title}\n${message}`, {
      ...toastOptions,
      duration: 4000,
    })
  }

  const notifyInfo = (title: string, message: string) => {
    if (!shouldShowNotifications()) return

    toast(`‚ÑπÔ∏è ${title}\n${message}`, {
      ...toastOptions,
      duration: 6000,
    })
  }

  const notifyRankProgress = (nextRank: NobleRank, requirements: typeof rankRequirements[NobleRank]) => {
    if (!noble || !shouldShowNotifications()) return

    const influenceProgress = Math.floor((noble.resources.influence / requirements.influence) * 100)
    const territoriesProgress = Math.floor((territories.length / requirements.territories) * 100)
    const achievementsProgress = Math.floor((noble.achievements.total / requirements.achievements) * 100)

    toast(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ —Ä–∞–Ω–≥–∞ ${nextRank}:
    –í–ª–∏—è–Ω–∏–µ: ${influenceProgress}%
    –¢–µ—Ä—Ä–∏—Ç–æ—Ä–∏–∏: ${territoriesProgress}%
    –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${achievementsProgress}%`, {
      ...toastOptions,
      duration: 8000,
    })
  }

  const notifyTerritoryProgress = (current: number, required: number) => {
    if (!shouldShowNotifications()) return

    const progress = Math.floor((current / required) * 100)
    toast(`üè∞ –ü—Ä–æ–≥—Ä–µ—Å—Å —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π: ${progress}%
    ${current}/${required} —Ç–µ—Ä—Ä–∏—Ç–æ—Ä–∏–π`, {
      ...toastOptions,
      duration: 5000,
    })
  }

  const notifyAchievementProgress = (progress: { 
    current: number, 
    nextMilestone: number,
    reward?: { gold: number, influence: number }
  }) => {
    if (!shouldShowNotifications()) return

    const message = progress.reward 
      ? `–î–æ —Å–ª–µ–¥—É—é—â–µ–π –Ω–∞–≥—Ä–∞–¥—ã: ${progress.nextMilestone - progress.current} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
         –ù–∞–≥—Ä–∞–¥–∞: üí∞ ${progress.reward.gold} üëë ${progress.reward.influence}`
      : `–ü—Ä–æ–≥—Ä–µ—Å—Å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: ${progress.current}/${progress.nextMilestone}`

    toast(`üèÜ ${message}`, {
      ...toastOptions,
      duration: 6000,
    })
  }

  return {
    notifyResourceReward,
    notifyAchievement,
    notifyError,
    notifyInfo
  }
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function getNextRank(currentRank: NobleRank): NobleRank | null {
  const ranks: NobleRank[] = ['–±–∞—Ä–æ–Ω', '–≤–∏–∫–æ–Ω—Ç', '–≥—Ä–∞—Ñ', '–º–∞—Ä–∫–∏–∑', '–≥–µ—Ä—Ü–æ–≥', '–∫–æ—Ä–æ–ª—å']
  const currentIndex = ranks.indexOf(currentRank)
  return currentIndex < ranks.length - 1 ? ranks[currentIndex + 1] : null
}

function calculateAchievementProgress(total: number) {
  const milestones = [5, 10, 25, 50, 100]
  const nextMilestone = milestones.find(m => m > total)
  
  if (!nextMilestone) return { current: total, nextMilestone: null }

  const reward = {
    gold: nextMilestone * 100,
    influence: nextMilestone * 50
  }

  return {
    current: total,
    nextMilestone,
    reward
  }
}
